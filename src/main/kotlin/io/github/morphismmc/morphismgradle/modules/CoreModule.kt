package io.github.morphismmc.morphismgradle.modules

import io.github.morphismmc.morphismgradle.PluginModule
import io.github.morphismmc.morphismgradle.ProjectProperties
import io.github.morphismmc.morphismgradle.Versions
import io.github.morphismmc.morphismgradle.dsl.MorphismExtension
import org.gradle.api.Project
import org.gradle.api.plugins.BasePluginExtension
import org.gradle.api.plugins.JavaLibraryPlugin
import org.gradle.api.plugins.JavaPluginExtension
import org.gradle.api.tasks.SourceSetContainer
import org.gradle.api.tasks.bundling.Jar
import org.gradle.api.tasks.compile.JavaCompile
import org.gradle.jvm.toolchain.JavaLanguageVersion
import org.gradle.kotlin.dsl.*
import org.gradle.kotlin.dsl.get

class CoreModule: PluginModule {
    override fun onApply(extension: MorphismExtension, properties: ProjectProperties, project: Project) {
        project.apply<Project> {
            version = properties.mod_version
            group = properties.mod_group_id

            plugins.apply(JavaLibraryPlugin::class.java)
            configure<JavaPluginExtension> {
                toolchain {
                    languageVersion.set(JavaLanguageVersion.of(21))
                }
            }

            // needs to be executed after useLombok()
            afterEvaluate {
                the<JavaPluginExtension>().withSourcesJar()
            }

            sourceSet()

            // Java Plugin has applied Base Plugin
            configure<BasePluginExtension> {
                archivesName = "${properties.mod_id}-${properties.minecraft_version}"
            }

            tasks.withType(JavaCompile::class.java).configureEach {
                options.encoding = Charsets.UTF_8.name()
            }

            tasks.withType(Jar::class.java).configureEach {
                exclude("/.cache")
            }

            configurations.apply {
                // This configuration should be used instead of "runtimeOnly" to declare
                // a dependency that will be present for runtime testing but that is
                // "optional", meaning it will not be pulled by dependents of this mod.
                getByName("runtimeClasspath").extendsFrom(create("localRuntime"))
            }

            dependencies {
                "compileOnly"("org.jetbrains:annotations:${Versions.JETBRAINS_ANNOTATIONS}")
            }
        }
    }

    private fun Project.sourceSet() {
        configure<SourceSetContainer> {
            register("gameTest") {
                compileClasspath += getByName("main").compileClasspath
                runtimeClasspath += getByName("main").runtimeClasspath
            }

            register("dataGen") {
                compileClasspath += getByName("main").compileClasspath
                runtimeClasspath += getByName("main").runtimeClasspath
            }

            named("main") {
                resources {
                    // Include resources generated by data generators.
                    srcDir("src/main/generated/resources/")
                }
            }
        }

        dependencies {
            "gameTestCompileOnly"(project.the<SourceSetContainer>()["main"].output)
            "dataGenCompileOnly"(project.the<SourceSetContainer>()["main"].output)
        }
    }
}